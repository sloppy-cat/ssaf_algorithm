# 2차원  A배열에 저장된 3개의 2 값을 각각 2번, 3번, 4번으로 변경(설명 편의상)
for i,j 전체탐색
    A[i][j] 가 2라면:
      A[i][j] 의 값을 3과 4로 변경한다.

# 이중 2와 3의 출발지에서 자기와 다른 번호의 출발지로 가는 최단거리들을 bfs로 구한다. 
for 2,3번 출발지에서 반복:
  queue[[출발좌표,0]]
  while queue가 차있는동안:
    i,j,거리 = queue.deque()

    if A[i][j] 가 목적지라면:
      거리를 저장
      if 목적지 2개의 거리를 모두 찾았다면:
        break

    for i,j의 상하좌우 탐색:
      if 이동할수있다면:
        queue.append( adj_i, adj_j, 거리+1)

# 각 출발지에서 목적지까지의 최단거리를 모두 구했다면 그중 최소값을 가지는 (출발지, 목적지)쌍을 2개의 출발지로 정한다.
# 양쪽에서 출발해서 만날때까지 걸리는 시간(방을 교차하는경우 만나지 않는것으로 한다) = (한쪽에서 출발하여 반대쪽까지 도달하는시간)//2+1 으로 계산할 수 있다.

result = min([2번에서 3번, 2번에서 4번, 3번에서 4번으로 가는 값])//2+1
